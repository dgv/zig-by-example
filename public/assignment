<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Zig by Example: Assignment</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'hello-world';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'integers';
          }
          
      }
  </script>
  <body>
    <div class="example" id="assignment">
      <h2><a href="./">Zig by Example</a>: Assignment</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>In Zig, values may be assigned to constants or variables.</p>

          </td>
          <td class="code empty leading">
            
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <img title="Copy code" src="clipboard.png" class="copy" />
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">std</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&#34;std&#34;</span><span class="p">);</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">anyerror</span><span class="o">!</span><span class="kt">void</span><span class="w"> </span><span class="p">{</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Here, we assign the value <code>true</code> to the <code>bool</code> constant <code>c</code>.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">c</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Here, we assign the value <code>false</code> to the <code>bool</code> variable <code>v</code>.
Afterwards, we re-assign <code>v</code>&rsquo;s value to <code>true</code>.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">v</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You can omit type annotations during assignment, in which case the
complier will infer the type for you.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">inferred_c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">inferred_v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
            <pre class="chroma"><span class="w">    </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">c</span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">v</span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">inferred_c</span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">inferred_v</span><span class="p">});</span><span class="w">
</span><span class="w"></span><span class="p">}</span></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
            <pre class="chroma"><span class="gp">$</span> zig run assignment.zig
<span class="go">true
</span><span class="go">true
</span><span class="go">true
</span><span class="go">true</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="integers">Integers</a>.
      </p>
      

    <p class="footer">
      by <a href="https://ket.so">Jason Phan</a> | <a href="https://github.com/ibokuri/zig-by-example">source</a> | <a href="https://github.com/ibokuri/zig-by-example#license">license</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('const std \u003D @import(\"std\");\u000A');codeLines.push('pub fn main() anyerror!void {\u000A');codeLines.push('    const c: bool \u003D true;\u000A');codeLines.push('    var v: bool \u003D false;\u000A    v \u003D true;\u000A');codeLines.push('    const inferred_c \u003D true;\u000A    var inferred_v \u003D true;\u000A');codeLines.push('    std.debug.print(\"{}\\n\", .{c});\u000A    std.debug.print(\"{}\\n\", .{v});\u000A    std.debug.print(\"{}\\n\", .{inferred_c});\u000A    std.debug.print(\"{}\\n\", .{inferred_v});\u000A}\u000A');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>

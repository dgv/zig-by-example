<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Zig by Example: Pointers</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'arrays';
          }
          
          
      }
  </script>
  <body>
    <div class="example" id="pointers">
      <h2><a href="./">Zig by Example</a>: Pointers</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>A <em>pointer</em> is an object that stores a memory address. Pointers in Zig come
in two forms: single- and many-item.</p>

          </td>
          <td class="code empty leading">
            
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <img title="Copy code" src="clipboard.png" class="copy" />
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">std</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&#34;std&#34;</span><span class="p">);</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Single-item pointers point to exactly one value.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">Single</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="kt">bool</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Many-item pointers point to an unknown number of values. Unless you&rsquo;re
interfacing with C code, you probably won&rsquo;t use these types of pointers, so
we&rsquo;ll skip over them.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">Many</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">bool</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Note that all pointers in Zig point to some non-<code>null</code> value. If you want
<code>null</code> pointers, you&rsquo;ll need to use <a
href="https://zig-by-example.com/optionals">Optionals</a>.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">const</span><span class="w"> </span><span class="n">Null</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">?*</span><span class="kt">bool</span><span class="p">;</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="kt">anyerror</span><span class="o">!</span><span class="kt">void</span><span class="w"> </span><span class="p">{</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>To create a single-item pointer, you use the <code>&amp;</code> operator. Here, <code>ptr</code>
is a pointer that stores <code>value</code>&rsquo;s memory address.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">ptr</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">value</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">ptr</span><span class="p">});</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>To access the value located at the memory address stored by a
single-item pointer, use the <code>*</code> operator.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">ptr</span><span class="p">.</span><span class="o">*</span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">ptr</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">ptr</span><span class="p">.</span><span class="o">*</span><span class="p">});</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Note that if a value is <code>const</code>, its pointer type is also <code>const</code>.</p>

          </td>
          <td class="code leading">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">const_value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">ptr_to_const</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="kr">const</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">const_value</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">ptr_to_const</span><span class="p">});</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>And if a pointer is <code>const</code>, that just means you can&rsquo;t change the
address stored by the pointer.</p>

          </td>
          <td class="code">
            
            <pre class="chroma"><span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">const_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">value</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">const_ptr</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">std</span><span class="p">.</span><span class="n">debug</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{}</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">ptr</span><span class="p">.</span><span class="o">*</span><span class="p">});</span><span class="w">
</span><span class="w"></span><span class="p">}</span></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
            <pre class="chroma"><span class="gp">$</span> zig run pointers.zig
<span class="go">bool@7ff7b26e24a7
</span><span class="go">true
</span><span class="go">false
</span><span class="go">bool@10d869c68
</span><span class="go">true</span></pre>
          </td>
        </tr>
        
      </table>
      
      

    <p class="footer">
      by <a href="https://ket.so">Jason Phan</a> | <a href="https://github.com/ibokuri/zig-by-example">source</a> | <a href="https://github.com/ibokuri/zig-by-example#license">license</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('const std \u003D @import(\"std\");\u000A');codeLines.push('const Single \u003D *bool;\u000A');codeLines.push('const Many \u003D [*]bool;\u000A');codeLines.push('const Null \u003D ?*bool;\u000A');codeLines.push('pub fn main() anyerror!void {\u000A');codeLines.push('    var value \u003D true;\u000A    var ptr: *bool \u003D \u0026value;\u000A    std.debug.print(\"{}\\n\", .{ptr});\u000A');codeLines.push('    std.debug.print(\"{}\\n\", .{ptr.*});\u000A    ptr.* \u003D false;\u000A    std.debug.print(\"{}\\n\", .{ptr.*});\u000A');codeLines.push('    const const_value \u003D true;\u000A    var ptr_to_const: *const bool \u003D \u0026const_value;\u000A    std.debug.print(\"{}\\n\", .{ptr_to_const});\u000A');codeLines.push('    const const_ptr \u003D \u0026value;\u000A    const_ptr.* \u003D true;\u000A    std.debug.print(\"{}\\n\", .{ptr.*});\u000A}\u000A');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
